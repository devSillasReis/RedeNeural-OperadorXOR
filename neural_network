#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug  4 11:58:59 2020

@author: sillas_reis
"""
### Rede nelral multicamada desenvolvida para predizer o operador XOR

import numpy as np

# Função de ativação e deriavda
def ativacao_sigmoid(n):
    return 1/(1+np.exp(-n))

def derivada_sigmoid(sig):
    return sig*(1-sig)

# Entradas e respectivas saídas esperadas para o operador XOR
entradas = np.array([[0,0],
                     [0,1],
                     [1,0],
                     [1,1]])

respostas = np.array([[0],
                      [1],
                      [1],
                      [0]])

# Iniciando pesos aleatórios para camadas de entrada e oculta
pesos0 = 2 * np.random.random((2,3)) - 1
pesos1 = 2 * np.random.random((3,1)) - 1

# Definição da taxa de aprendizagem e épocas para repetição
taxa_aprendizagem = 0.4
epocas = 10

# Ciclo de treinamento
for _ in range(epocas):
    # Obtendo resultado para cada registro com a ativação do produto escalar 
    # dos neurônios pelos pesos 
    camada_oculta = ativacao_sigmoid(entradas.dot(pesos0))
    camada_saida = ativacao_sigmoid(camada_oculta.dot(pesos1))
    
    # Calculando erro médio absoluto
    media_erro = np.mean(np.abs(respostas - camada_saida))
    